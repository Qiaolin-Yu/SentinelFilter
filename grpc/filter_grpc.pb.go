// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: filter.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BloomFilterServiceClient is the client API for BloomFilterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BloomFilterServiceClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
}

type bloomFilterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBloomFilterServiceClient(cc grpc.ClientConnInterface) BloomFilterServiceClient {
	return &bloomFilterServiceClient{cc}
}

func (c *bloomFilterServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/service.BloomFilterService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloomFilterServiceClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, "/service.BloomFilterService/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BloomFilterServiceServer is the server API for BloomFilterService service.
// All implementations must embed UnimplementedBloomFilterServiceServer
// for forward compatibility
type BloomFilterServiceServer interface {
	Add(context.Context, *AddRequest) (*emptypb.Empty, error)
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	mustEmbedUnimplementedBloomFilterServiceServer()
}

// UnimplementedBloomFilterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBloomFilterServiceServer struct {
}

func (UnimplementedBloomFilterServiceServer) Add(context.Context, *AddRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedBloomFilterServiceServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedBloomFilterServiceServer) mustEmbedUnimplementedBloomFilterServiceServer() {}

// UnsafeBloomFilterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BloomFilterServiceServer will
// result in compilation errors.
type UnsafeBloomFilterServiceServer interface {
	mustEmbedUnimplementedBloomFilterServiceServer()
}

func RegisterBloomFilterServiceServer(s grpc.ServiceRegistrar, srv BloomFilterServiceServer) {
	s.RegisterService(&BloomFilterService_ServiceDesc, srv)
}

func _BloomFilterService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloomFilterServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BloomFilterService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloomFilterServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloomFilterService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloomFilterServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BloomFilterService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloomFilterServiceServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BloomFilterService_ServiceDesc is the grpc.ServiceDesc for BloomFilterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BloomFilterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.BloomFilterService",
	HandlerType: (*BloomFilterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _BloomFilterService_Add_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _BloomFilterService_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filter.proto",
}
